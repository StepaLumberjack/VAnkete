//
//  MessagesViewController.swift
//  ShareNews
//
//  Created by macbookpro on 03.12.2017.
//  Copyright Â© 2017 macbookpro. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    @IBOutlet weak var newsAuthor: UILabel!
    @IBOutlet weak var newsPic: UIImageView!
    @IBOutlet weak var newsText: UILabel!
    @IBAction func sendiMessage(_ sender: Any) {
        var layout = MSMessageTemplateLayout()
        layout.caption = (newsAuthor.text as! String)
        layout.image = newsPic.image
        layout.subcaption = newsText.text
        let message = MSMessage()
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
    }
    
    let session: URLSession = {
        let config = URLSessionConfiguration.default
        return URLSession(configuration: config)
    }()
    
    lazy var url: URL? = {
        var components = URLComponents()
        components.scheme = "https"
        components.host = "api.vk.com"
        components.path = "/method/newsfeed.get"
        components.queryItems = [
            URLQueryItem(name: "access_token", value: "d44575625a3c5e895297748d6356bd7810321cd2a4fd8fef692c7d01fed4fa4689037d077ba2fe1f0d28c"),
            URLQueryItem(name: "v", value: "5.68"),
            URLQueryItem(name: "filters", value: "post"),
            URLQueryItem(name: "count", value: "1")
        ]
        return components.url
    }()

    
    override func viewDidLoad() {
        super.viewDidLoad()
        guard let url = url else {
            assertionFailure()
            return
        }
        DispatchQueue.global(qos: .userInteractive).async {
            self.session.dataTask(with: url) { data, response, error in
                print(data, error)
                guard let data = data else {
                    assertionFailure()
                    return
                }
                guard let json = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.mutableContainers) else {
                    return
                }
                let array = json as! [String: Any]
                let response = array["response"] as! [String: Any]
                let items = response["items"] as! [[String: Any]]
                var text = items[0]["text"] as? String
                if text == "" {
                    text = "no text new"
                }
                self.newsText.text = text
                let sourceID = items[0]["source_id"] as! Int
                if sourceID > 0 {
                    let profiles = response["profiles"] as! [[String: Any]]
                    let authorName = profiles[0]["first_name"] as! String
                    let authorSername = profiles[0]["last_name"] as! String
                    self.newsAuthor.text = authorName + authorSername
                } else {
                    let groups = response["groups"] as! [[String: Any]]
                    let author = groups[0]["name"] as! String
                    self.newsAuthor.text = author
                }
                let attachments = items[0]["attachments"] as! [[String: Any]]
                let photo = attachments[0]["photo"] as? [String: Any] ?? [:]
                let picture = photo["photo_130"] as? String ?? "https://pp.userapi.com/c412930/v412930076/3200/uHMU9ZBGmrQ.jpg"
                self.newsPic.setImageFromUrl(stringImageUrl: picture)
                }.resume()
            print(url)
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
extension UIImageView {
    
    func setImageFromUrl (stringImageUrl url: String) {
        if let url = NSURL(string: url) {
            if let data = NSData(contentsOf: url as URL) {
                self.image = UIImage(data: data as Data)
            }
        }
    }
}
